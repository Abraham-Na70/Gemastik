alright, here's my BE codes



config.py

import os



class Config:

MONGO_HOST = os.environ.get("MONGO_HOST", "localhost")

MONGO_PORT = int(os.environ.get("MONGO_PORT", 27017))

MONGO_DB = os.environ.get("MONGO_DB", "mydatabase")

MONGO_URI = f"mongodb://{MONGO_HOST}:{MONGO_PORT}/{MONGO_DB}"



auth_controller.py

from flask import jsonify, request

from models.auth_model import AuthModel

from schemas.auth_schemas import RegisterSchemas, LoginSchemas



def login():

data = LoginSchemas(**request.json)

is_exists = AuthModel.user_exists(data.username)

if not is_exists:

return jsonify(message="User does not exist"), 404

is_verified = AuthModel.verify_user(data.username, data.password)

if not is_verified:

return jsonify(message="Invalid credentials"), 401

return jsonify(message="Login successful"), 200



def register():

# Simulate a registration process

data = RegisterSchemas(**request.json)

is_exists = AuthModel.user_exists(data.username)



if is_exists:

return jsonify(message="User already exists"), 409


AuthModel.create_user(data.username, data.password)

return jsonify(message="Registration successful"), 201



def index():

# Simulate a home page

return jsonify(message="Welcome to the home page"), 200



company_controller.py

from flask import jsonify, request



from models.company_model import CompanyModel

from models.jobs_model import JobsModel

from schemas.company_schemas import CompanySchemas



def index():

# Simulate a home page

data = CompanyModel.index()

return jsonify(message="Data berhasil di raih", data=data), 200



def create_company():

data = CompanySchemas(**request.json)



CompanyModel.create_company(data.name, data.description)

return jsonify(message="Company created successfully", data = data), 201



def get_company_by_id(id):

# Simulate fetching a company by ID from the database

company = CompanyModel.get_company_by_id(id)

if not company:

return jsonify(message="Company not found", id=id, company=company), 404

return jsonify(message="Company found", data=company), 200



def delete_company_by_id(id):

# Simulate deleting a company by ID from the database

company = CompanyModel.get_company_by_id(id)

if not company:

return jsonify(message="Company not found", id=id, company=company), 404

CompanyModel.delete_company_by_id(id)

JobsModel.delete_job_by_company(id)

return jsonify(message="Company deleted successfully"), 200



def update_company_by_id(id):

company = CompanyModel.get_company_by_id(id)

if not company:

return jsonify(message="Company not found", id=id, company=company), 404

data = CompanySchemas(**request.json)

CompanyModel.update_company_by_id(id, data.dict())

return jsonify(message="Update Company Succesfully"), 200



interview_controller.py

from flask import jsonify, request

from models.interview_model import InterviewModel

from models.log_interview_model import LogInterviewModel

from models.memory_interview_model import MemoryInterviewModel

from schemas.interview_schemas import InterviewSchema, InterviewUpdateSchema



def index():

data = InterviewModel.show()

return jsonify(message="Data berhasil di raih", data=data), 200



def show_id(id):

interview = InterviewModel.show_id(id)

if not interview:

return jsonify(message="Interview not found", id=id, interview=interview), 404

return jsonify(message="Interview found", data=interview), 200



def show_user(user_id):

interview = InterviewModel.show_user(user_id)

if not interview:

return jsonify(message="Interview not found", id=user_id, interview=interview), 404

return jsonify(message="Interview Found", data=interview),200



def create():

data = InterviewSchema(**request.json)

interview_id = InterviewModel.store(data.user_id, data.job_id)



if not interview_id:

return jsonify(message="Failed to create interview"), 500



LogInterviewModel.store(interview_id)

MemoryInterviewModel.store(interview_id)



return jsonify(message="Interview created successfully", data={

"interview_id": interview_id,

"user_id": data.user_id,

"job_id": data.job_id

}), 201

def update(id):

interview = InterviewModel.show_id(id)

if not interview:

return jsonify(message="Interview not found", id=id, interview=interview), 404

data = InterviewUpdateSchema(**request.json)

InterviewModel.update(id, data.dict(exclude_unset=True))

return jsonify(message="Update Interview Succesfully"), 200



def delete(id):

interview = InterviewModel.show_id(id)

if not interview:

return jsonify(message="Interview not found", id=id, interview=interview), 404

InterviewModel.delete(id)

return jsonify(message="Interview deleted successfully"), 200



jobs_controller.py

from flask import jsonify, request

from models.jobs_model import JobsModel

from schemas.jobs_schemas import JobSchemas



def index():

# Simulate a home page

data = JobsModel.get_all_jobs()

return jsonify(message="Data berhasil di raih", data = data), 200



def create_job():

# Simulate a job creation process

data = JobSchemas(**request.json)

# Simulate saving the job to the database

JobsModel.create_job(data.title, data.description, data.skills, data.company_id)

return jsonify(message="Job created successfully"), 201



def get_job_by_id(id):

# Simulate fetching a job by ID from the database

job = JobsModel.get_job_by_id(id)

if not job:

return jsonify(message="Job not found", id = id, job = job), 404

return jsonify(message="Job found", data=job), 200



def delete_job_by_id(id):

# Simulate deleting a job by ID from the database

job = JobsModel.get_job_by_id(id)

if not job:

return jsonify(message="Job not found", id = id, job = job), 404

JobsModel.delete_job_by_id(id)

return jsonify(message="Job deleted successfully"), 200



def update_job_by_id(id):

# Simulate updating a job by ID in the database

job = JobsModel.get_job_by_id(id)

if not job:

return jsonify(message="Job not found", id = id, job = job), 404

data = JobSchemas(**request.json)

JobsModel.update_job_by_id(id, data.dict())

return jsonify(message="Job updated successfully"), 200



log_interview_controller.py

from flask import request, jsonify

from models.log_interview_model import LogInterviewModel

from schemas.log_interview_schemas import LogInterviewSchema



def index():

log = LogInterviewModel.show()

return jsonify(message="Data berhasil di raih", data=log), 200



def show_id(id):

data = LogInterviewModel.show_id(id)

if not data:

return jsonify(message="Log Interview not found", id=id, log=data), 404

return jsonify(message="Log Interview found", data=data), 200



def store():

data = LogInterviewSchema(**request.json)

LogInterviewModel.store(data.interview_id)

return jsonify(message="Log Interview created successfully", data=data), 201



def update(id):

log = LogInterviewModel.show_id(id)

if not log:

return jsonify(message="Log Interview not found", id=id, log=log), 404

data = request.json



if 'sender' not in data or 'message' not in data:

return jsonify(message="Sender is required"), 400


print(f"Updating Log Interview with ID: {id}")

print(f"Data received for update: {data}")



chat_entry = {

"sender": data['sender'],

"message": data['message'],

"elapsed_time" : data['elapsed_time'] if 'elapsed_time' in data else 0,

}



print(f"Chat entry: {chat_entry}")



log_interview = LogInterviewModel.append_data(id, chat_entry)

print(f"Log interview after update: {log_interview}")

if not log_interview:

return jsonify(message="Failed to update Log Interview"), 500


return jsonify(message="Log Interview updated successfully"), 200



def delete(id):

log = LogInterviewModel.show_id(id)

if not log:

return jsonify(message="Log Interview not found", id=id, log=log), 404

LogInterviewModel.delete(id)

return jsonify(message="Log Interview deleted successfully"), 200



memory_interview_controller.py

from flask import jsonify, request

from models.memory_interview_model import MemoryInterviewModel

from schemas.memory_interview_schemas import MemoryInterviewSchema, MemoryInterviewUpdateSchema, MemoryInterviewUpdateQuestionSchema



def index():

data = MemoryInterviewModel.show()

return jsonify(message="Data berhasil di raih", data=data), 200



def show_id(id):

memory_interview = MemoryInterviewModel.show_id(id)

if not memory_interview:

return jsonify(message="Memory Interview not found", id=id, memory_interview=memory_interview), 404

return jsonify(message="Memory Interview found", data=memory_interview), 200



def store():

data = MemoryInterviewSchema(**request.json)

MemoryInterviewModel.store(data.interview_id)

return jsonify(message="Memory Interview created successfully", data=data), 201



def update(id):

memory_interview = MemoryInterviewModel.show_id(id)

if not memory_interview:

return jsonify(message="Memory Interview not found", id=id, memory_interview=memory_interview), 404

data = MemoryInterviewUpdateSchema(**request.json)

MemoryInterviewModel.update(id, data.dict())

return jsonify(message="Update Memory Interview Succesfully"), 200



def delete(id):

memory_interview = MemoryInterviewModel.show_id(id)

if not memory_interview:

return jsonify(message="Memory Interview not found", id=id, memory_interview=memory_interview), 404

MemoryInterviewModel.delete(id)

return jsonify(message="Memory Interview deleted successfully"), 200



def append_data(id):

memory_interview = MemoryInterviewModel.show_id(id)

if not memory_interview:

return jsonify(message="Memory Interview not found", id=id, memory_interview=memory_interview), 404

data = MemoryInterviewUpdateQuestionSchema(**request.json)

MemoryInterviewModel.append_data(id, data.dict())

return jsonify(message="Append Data Memory Interview Succesfully"), 200



mongo.py

from flask_pymongo import PyMongo



mongo = PyMongo()



auth_model.py

from extensions.mongo import mongo

from werkzeug.security import generate_password_hash, check_password_hash



class AuthModel:

@staticmethod

def create_user(username, password):

# Simulate user creation

user = {

'username': username,

'password': generate_password_hash(password)

}

mongo.db.users.insert_one(user).inserted_id

return user


@staticmethod

def verify_user(username, password):

# Simulate user verification

user = mongo.db.users.find_one({'username': username})

if user and check_password_hash(user['password'], password):

return True

return False

pass



@staticmethod

def user_exists(username):

# Check if a user with the given username exists in the database

# return mongo.db.users.find_one({'username': username}) is not None

user = mongo.db.users.find_one({'username': username})

return user is not None



company_model.py

from extensions.mongo import mongo

from bson import ObjectId

from bson.errors import InvalidId



class CompanyModel:

@staticmethod

def index():

companies = list(mongo.db.company.find())

# --- THIS LOOP IS THE FIX ---

# It converts the complex ObjectId to a simple string for each company

for company in companies:

company['_id'] = str(company['_id'])

return companies


@staticmethod

def create_company(name, description):

company_data = {

'name': name,

'description': description,

}

result = mongo.db.company.insert_one(company_data)

new_company = mongo.db.company.find_one({'_id': result.inserted_id})

if new_company:

new_company['_id'] = str(new_company['_id'])

return new_company


@staticmethod

def get_company_by_id(id):

try :

obj_id = ObjectId(id)

company = mongo.db.company.find_one({'_id': obj_id})

if company:

company['_id'] = str(company['_id'])

return company

except (InvalidId, TypeError):

return None


@staticmethod

def delete_company_by_id(id):

try:

result = mongo.db.company.delete_one({'_id': ObjectId(id)})

return result.deleted_count > 0

except InvalidId:

return False


@staticmethod

def update_company_by_id(id, update_data):

try:

result = mongo.db.company.update_one(

{'_id': ObjectId(id)},

{'$set': update_data}

)

return result.modified_count > 0

except InvalidId:

return False



interview_model.py

from extensions.mongo import mongo

from bson import ObjectId

from bson.errors import InvalidId



class InterviewModel:



@staticmethod

def show():

interviews = list(mongo.db.interview.find())

# Convert ObjectId to string for each interview

for interview in interviews:

interview['_id'] = str(interview['_id'])

return interviews


@staticmethod

def show_id(id):

try:

obj_id = ObjectId(id)

interview = mongo.db.interview.find_one({'_id': obj_id})

if interview:

interview['_id'] = str(interview['_id'])

return interview

except (InvalidId, TypeError):

return None


@staticmethod

def show_user(user_id):

try:

# find() returns a cursor, so we need to convert it to a list

interviews = list(mongo.db.interview.find({'user_id': user_id}))

# Convert ObjectId to string for each interview

for interview in interviews:

interview['_id'] = str(interview['_id'])

return interviews

except (InvalidId, TypeError):

return None


@staticmethod

def store(user_id, job_id):

try:

data = {

"user_id" : user_id,

"job_id" : job_id,

"status" : "not_started",

"list_question" : [],

}

result = mongo.db.interview.insert_one(data)

return str(result.inserted_id)

except InvalidId:

return None


@staticmethod

def update(id, data):

try:

result = mongo.db.interview.update_one(

{'_id': ObjectId(id)},

{'$set': data}

)

return result.modified_count > 0

except InvalidId:

return False


@staticmethod

def delete(id):

try:

result = mongo.db.interview.delete_one({'_id': ObjectId(id)})

return result.deleted_count > 0

except InvalidId:

return False



jobs_model.py

from extensions.mongo import mongo

from bson import ObjectId

from bson.errors import InvalidId



class JobsModel:

@staticmethod

def get_all_jobs():

# Simulate fetching all jobs from the database

jobs = list(mongo.db.jobs.find())

return jobs


@staticmethod

def get_job_by_id(job_id):

try:

# Ubah string jadi ObjectId

obj_id = ObjectId(job_id)

# Cari di MongoDB berdasarkan _id

job = mongo.db.jobs.find_one({'_id': obj_id})

return job

except (InvalidId, TypeError):

# Jika job_id tidak valid, kembalikan None

return None


@staticmethod

def create_job(title, description, skills, company_id):

# Simulate creating a job in the database

job = {

'title': title,

'description': description,

'skills': skills,

'company_id': company_id

}

mongo.db.jobs.insert_one(job)

return job


@staticmethod

def delete_job_by_id(id):

try:

result = mongo.db.jobs.delete_one({'_id': ObjectId(id)})

return result.deleted_count > 0

except InvalidId:

# Handle the case where the id is not a valid ObjectId

return False

pass



@staticmethod

def delete_job_by_company(id):

try:

result = mongo.db.jobs.delete_many({'company_id': id})

return result.deleted_count > 0

except InvalidId:

return False



@staticmethod

def update_job_by_id(id, upadate_data):

try:

result = mongo.db.jobs.update_one(

{'_id': ObjectId(id)},

{'$set': upadate_data}

)

return result.modified_count > 0

except (InvalidId, TypeError):

raise InvalidId("Invalid ID format")



log_interview_model.py

from extensions.mongo import mongo

from bson import ObjectId

from bson.errors import InvalidId



class LogInterviewModel:

@staticmethod

def show():

log_interview = list(mongo.db.log_interview.find())

return log_interview


@staticmethod

def show_id(id):

try:

# obj_id = ObjectId(id)

log_interview = mongo.db.log_interview.find_one({'interview_id': id})

return log_interview

except (InvalidId, TypeError):

return None


@staticmethod

def store(id):

try:

data = {

"interview_id" : id,

"chat" : []

}

mongo.db.log_interview.insert_one(data)

except InvalidId:

# Handle the case where the id is not a valid ObjectId

return None


@staticmethod

def update(id, data):

try:

result = mongo.db.log_interview.update_one(

{'interview_id': id},

{'$set': data}

)

return result.modified_count > 0

except:

return False


@staticmethod

def append_data(id, data):

try:

result = mongo.db.log_interview.update_one(

{'interview_id': id},

{'$push': {'chat': data}}

)

return result.modified_count > 0

except InvalidId:

return False


@staticmethod

def delete(id):

try:

result = mongo.db.log_interview.delete_one({'_id': ObjectId(id)})

return result.deleted_count > 0

except InvalidId:

return False



memory_interview_model.py

from extensions.mongo import mongo

from bson import ObjectId

from bson.errors import InvalidId



class MemoryInterviewModel:

@staticmethod

def show():

memory = list(mongo.db.memory_interview.find())

return memory


@staticmethod

def show_id(id):

try:

memory = mongo.db.memory_interview.find_one({'interview_id': id})

return memory

except (InvalidId, TypeError):

return None


def store(id):

try:

data = {

"interview_id" : id,

"summary" : "",

"answered_question" : [],

}

mongo.db.memory_interview.insert_one(data)

except InvalidId:

# Handle the case where the id is not a valid ObjectId

return None

return data


def update(id, data):

try:

result = mongo.db.memory_interview.update_one(

{'interview_id': id},

{'$set': data}

)

return result.modified_count > 0

except InvalidId:

# Handle the case where the id is not a valid ObjectId

return False


def delete(id):

try:

result = mongo.db.memory_interview.delete_one({'_id': ObjectId(id)})

return result.deleted_count > 0

except InvalidId:

return False


def append_data(id, data):

try:

result = mongo.db.memory_interview.update_one(

{'interview_id': id},

{'$push': data}

)

return result.modified_count > 0

except InvalidId:

return False



auth_routes.py

from flask import Blueprint

from controllers.auth_controller import login, register, index



auth_routes = Blueprint('auth_routes', __name__)



auth_routes.route('/login', methods=['POST'])(login)

auth_routes.route('/register', methods=['POST'])(register)

auth_routes.route('/', methods=['GET'])(index)



company_routes.py

from flask import Blueprint

from controllers.company_controller import (

index,

create_company,

get_company_by_id,

delete_company_by_id,

update_company_by_id

)



company_routes = Blueprint('company_routes', __name__)



company_routes.route('/', methods=['GET'])(index)

company_routes.route('/', methods=['POST'])(create_company)

company_routes.route('/id/<id>', methods=['GET'])(get_company_by_id)

company_routes.route('/id/<id>', methods=['DELETE'])(delete_company_by_id)

company_routes.route('/id/<id>', methods=['PUT'])(update_company_by_id)



interview_routes.py

from flask import Blueprint



from controllers.interview_controller import (

index,

show_id,

show_user,

create,

update,

delete

)

interview_routes = Blueprint('interview_routes', __name__)





# db interview

interview_routes.route('/', methods=['GET'])(index) # untuk dapat lihat semua interview

interview_routes.route('/<id>', methods=['GET'])(show_id)

interview_routes.route('/user/<user_id>', methods=['GET'])(show_user) # untuk dapat lihat interview sesuai user

interview_routes.route('/', methods=['POST'])(create) # untuk buat interview

interview_routes.route('/<id>', methods=['PUT'])(update) # untuk update interview

interview_routes.route('/<id>', methods=['DELETE'])(delete) # untuk delete interview



# db log

interview_routes.route('/id/<id>/chat', methods=['POST']) # untuk menambahkan chat ke dalam log sesuai id interview

interview_routes.route('/id/<id>/chat', methods=['GET']) # untuk dapat lihat interview sesuai id



# db memory

interview_routes.route('/id/<id>/memory', methods=['POST']) # untuk menambahkan memory ke dalam log sesuai id interview

interview_routes.route('/id/<id>/memory', methods=['GET']) # untuk dapat lihat interview sesuai id



jobs_routers.py

from flask import Blueprint, jsonify, request



from controllers.jobs_controller import (

index,

create_job,

get_job_by_id,

delete_job_by_id,

update_job_by_id

)



jobs_routes = Blueprint('jobs_routes', __name__)



jobs_routes.route('/', methods=['GET'])(index)

jobs_routes.route('/', methods=['POST'])(create_job)

jobs_routes.route('/id/<id>', methods=['GET'])(get_job_by_id)

jobs_routes.route('/id/<id>', methods=['DELETE'])(delete_job_by_id)

jobs_routes.route('/id/<id>', methods=['PUT'])(update_job_by_id)



log_interview_routes.py

from flask import Blueprint



from controllers.log_interview_controller import (

index,

show_id,

store,

update,

delete,

)



log_interview_routes = Blueprint('log_interview_routes', __name__)



log_interview_routes.route('/', methods=['GET'])(index) # untuk dapat lihat semua log interview

log_interview_routes.route('/<id>', methods=['GET'])(show_id) # untuk dapat lihat log interview sesuai id

log_interview_routes.route('/', methods=['POST'])(store) # untuk buat log interview

log_interview_routes.route('/<id>', methods=['PUT'])(update) # untuk update log interview

log_interview_routes.route('/<id>', methods=['DELETE'])(delete) # untuk delete log interview



memory_interview_routes.py

from flask import Blueprint



from controllers.memory_interview_controller import (

index,

show_id,

store,

update,

delete,

append_data

)



memory_interview_routes = Blueprint('memory_interview_routes', __name__)



memory_interview_routes.route('/', methods=['GET'])(index) # untuk dapat lihat semua memory interview

memory_interview_routes.route('/<id>', methods=['GET'])(show_id) # untuk dapat lihat memory interview sesuai id

memory_interview_routes.route('/', methods=['POST'])(store) # untuk buat memory interview

memory_interview_routes.route('/<id>', methods=['PUT'])(update) # untuk update memory interview

memory_interview_routes.route('/<id>/push', methods=['PUT'])(append_data) # untuk update memory interview

memory_interview_routes.route('/<id>', methods=['DELETE'])(delete) # untuk delete memory interview



routers.py

from flask import Blueprint



from routes.auth_routes import auth_routes

from routes.jobs_routes import jobs_routes

from routes.company_routes import company_routes

from routes.interview_routes import interview_routes

from routes.log_interview_routes import log_interview_routes

from routes.memory_interview_routes import memory_interview_routes



api = Blueprint('api', __name__, url_prefix='/api')



api.register_blueprint(auth_routes, url_prefix='/auth')

api.register_blueprint(jobs_routes, url_prefix='/jobs')

api.register_blueprint(company_routes, url_prefix='/company')

api.register_blueprint(interview_routes, url_prefix='/interview')

api.register_blueprint(log_interview_routes, url_prefix='/interview/log')

api.register_blueprint(memory_interview_routes, url_prefix='/interview/memory')



auth_schemas.py

from pydantic import BaseModel



class RegisterSchemas(BaseModel):

username: str

# email: str

password: str



class LoginSchemas(BaseModel):

username: str

password: str



company_schemas.py

from pydantic import BaseModel



class CompanySchemas(BaseModel):

name: str

description: str



interview_schemas.py

from pydantic import BaseModel

from typing import Optional



class InterviewSchema(BaseModel):

user_id: str

job_id: str



class InterviewUpdateSchema(BaseModel):

user_id: Optional[str] = None

job_id: Optional[str] = None

status: Optional[str] = None



class Config:

extra = "allow"



jobs_schemas.py

from pydantic import BaseModel



class JobSchemas(BaseModel):

title: str

description: str

# salary: float

skills: list[str]

company_id: str



log_interview_schemas.py

from pydantic import BaseModel



class LogInterviewSchema(BaseModel):

interview_id: str



class Config:

extra = "allow"





memory_interview_schemas.py

from pydantic import BaseModel



class MemoryInterviewSchema(BaseModel):

interview_id: str



class MemoryInterviewUpdateSchema(BaseModel):

summary: str



class MemoryInterviewUpdateQuestionSchema(BaseModel):

answered_question: str



main.py

from flask import Flask, jsonify

from flask_pymongo import PyMongo

from flask_cors import CORS

from config.config import Config

from extensions.mongo import mongo

from flasgger import Swagger

# import os

# import uvicorn



from routes.routes import api



def create_app():

app = Flask(__name__)

app.url_map.strict_slashes = False

app.config.from_object(Config)



mongo.init_app(app)



# os.environ['WERKZEUG_RUN_MAIN'] = 'true'



app.register_blueprint(api)

Swagger(app)

CORS(app, resources={r"/api/*": {"origins": "*"}})



return app





if __name__ == '__main__':

app = create_app()

app.run(host='0.0.0.0', port=8000, debug=True, use_reloader=False)

# if __name__ == "__main__":

# uvicorn.run("main:app", port=5000, log_level="info")

# List semua route yang sudah terdaftar

# with app.test_request_context():

# for rule in app.url_map.iter_rules():

# methods = ', '.join(rule.methods - {'HEAD', 'OPTIONS'}) # Hilangkan metode default Flask

# print(f"URL: {rule.rule}, Methods: {methods}, Endpoint: {rule.endpoint}")

# app.run(host='0.0.0.0', port=5050, debug=True)
